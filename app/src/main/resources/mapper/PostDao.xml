<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bitcamp.carrot_thunder.post.model.dao.PostDao">

    <resultMap type="post" id="articleMap">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="content" property="content"/>
        <result column="view_count" property="viewCount"/>
        <result column="created_at" property="createdAt"/>
        <result column="item_category" property="itemCategory"/>
        <result column="item_status" property="itemStatus"/>
        <result column="dealing_type" property="dealingType"/>
        <result column="address" property="address"/>
        <result column="price" property="price"/>
        <result column="like_count" property="likeCount"/>

        <association property="user" javaType="User">
            <id column="user_id" property="id"/>
            <result column="nickname" property="nickName"/>
        </association>

        <collection property="attachedFiles" ofType="attachedFile">
            <id column="id" property="id"/>
            <result column="filepath" property="filePath"/>
            <result column="post_id" property="postId"/>
        </collection>
    </resultMap>

    <resultMap type="attachedFile" id="attachedFileMap">
        <id column="id" property="id"/>
        <result column="filepath" property="filePath"/>
        <result column="post_id" property="postId"/>
    </resultMap>

    <insert id="insert" parameterType="post" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO tbl_article(title, content, view_count, item_category, dealing_type, item_status, price, address, user_id)
        VALUES(#{title}, #{content}, #{viewCount}, #{itemCategory}, #{dealingType}, #{itemStatus}, #{price}, #{address}, #{user.id})
    </insert>

    <insert id="insertFiles" parameterType="post">
        INSERT INTO file(filepath, article_id)
        VALUES
        <foreach collection="attachedFiles" item="file" separator=",">
            (#{file.filePath}, #{id})
        </foreach>
    </insert>

    <select id="findBy" resultMap="articleMap" parameterType="int">
        SELECT
        a.id,
        u.nickname,
        u.id,
        a.title,
        a.content,
        a.created_at,
        a.dealing_type,
        a.item_category,
        a.item_status,
        f.id,
        f.filepath
        FROM
        tbl_article a
        INNER JOIN tbl_user u ON a.user_id = u.id
        LEFT JOIN tbl_file f ON a.id = f.article_id
        WHERE
        a.id=#{postId}
    </select>

    <select id="findAll" resultMap="articleMap">
        SELECT
        a.id,
        u.nickname,
        u.id,
        a.title,
        a.content,
        a.view_count,
        a.created_at,
        a.dealing_type,
        a.item_category,
        a.item_status,
        a.address,
        a.price,
        f.id,
        f.filepath
        FROM
        tbl_article a
        INNER JOIN tbl_user u ON a.user_id = u.id
        LEFT OUTER JOIN tbl_file f ON a.id = f.article_id
        ORDER BY
        a.id DESC
    </select>

    <select id="findByPage" resultMap="articleMap">
        SELECT
        a.id,
        u.nickname,
        u.id as user_id,
        a.title,
        a.content,
        a.view_count,
        a.created_at,
        a.dealing_type,
        a.item_category,
        a.item_status,
        a.address,
        a.price,
        f.id,
        f.filepath
        FROM
        tbl_article a
        INNER JOIN tbl_user u ON a.user_id = u.id
        LEFT OUTER JOIN (
        SELECT article_id, MIN(id) as id, filepath
        FROM tbl_file
        GROUP BY article_id
        ) f ON a.id = f.article_id
        ORDER BY
        a.id DESC
        LIMIT #{start}, #{end};





    </select>

    <select id="findFileBy" parameterType="int" resultMap="attachedFileMap">
        SELECT
        file_id,
        filepath,
        post_id
        FROM
        file
        WHERE
        file_id=#{id}
    </select>

    <select id="getMyPosts" resultMap="articleMap">
        SELECT
        a.id,
        u.nickname,
        u.id,
        a.title,
        a.content,
        a.created_at,
        a.dealing_type,
        a.item_category,
        a.item_status,
        f.id,
        f.filepath,
        a.like_count
        FROM
        tbl_article a
        INNER JOIN tbl_user u ON a.user_id = u.id
        LEFT OUTER JOIN file f ON a.id = f.post_id
        WHERE
        a.user_id = #{userId}
        ORDER BY
        a.id DESC;
    </select>



    <update id="updateCount" parameterType="int">
        update tbl_article set
        view_count=view_count + 1
        where
        id=#{no}
    </update>

    <delete id="deleteFile" parameterType="Long">
        delete from tbl_file
        where
        id=#{id}
    </delete>

    <delete id="deleteFiles" parameterType="Long">
        delete from tbl_file
        where
        article_id=#{postId}
    </delete>

    <delete id="deleteChat" parameterType="Long">
        delete from tbl_chat
        where
        id=#{id}
    </delete>

    <update id="update" parameterType="post">
        update tbl_article set
        title=#{title},
        content=#{content},
        price=#{price},
        address=#{address}
        where
        id=#{id}
    </update>

    <delete id="delete" parameterType="Long">
        delete from tbl_article
        where
        id=#{id}
    </delete>


    <delete id="deleteLikes" parameterType="int">
        delete from like_list
        where
        article_id=#{postId}
    </delete>


    <update id="updateLikeCount">
        UPDATE
        tbl_article
        SET
        like_count = like_count + #{amount}
        WHERE
        id = #{postId}
    </update>


    <insert id="insertLike">
        INSERT INTO
        like_list (article_id, member_id)
        VALUES (#{postId}, #{memberId})
    </insert>

    <delete id="deleteLike">
        DELETE FROM
        like_list
        WHERE
        article_id = #{postId} AND member_id = #{memberId}
    </delete>


    <select id="isLiked" resultType="boolean">
        SELECT
        COUNT(*)
        FROM like_list
        WHERE
        article_id = #{postId} AND member_id = #{memberId}
    </select>


    <select id="getLikeCount" resultType="int">
        SELECT
        COUNT(*)
        FROM
        like_list
        WHERE
        article_id = #{postId}
    </select>


    <select id="getLikedPosts" resultMap="articleMap">
        SELECT
        a.id,
        u.nickname,
        u.id as user_id,
        a.title,
        a.content,
        a.created_at,
        a.dealing_type,
        a.item_category,
        a.item_status,
        f.file_id,
        f.filepath
        FROM
        tbl_article a
        JOIN like_list l ON a.id = l.article_id
        JOIN tbl_user u ON a.user_id = u.id
        LEFT JOIN file f ON a.id = f.article_id
        WHERE
        l.user_id = #{userId}
        ORDER BY
        a.id DESC
    </select>

    <select id="findById" parameterType="Long" resultMap="articleMap">
        SELECT
        a.id,
        u.nickname,
        u.id,
        a.title,
        a.content,
        a.view_count,
        a.created_at,
        a.dealing_type,
        a.item_category,
        a.item_status,
        a.address,
        a.price,
        f.id,
        f.filepath
        FROM
        tbl_article a
        INNER JOIN
        tbl_user u ON a.user_id = u.id
        LEFT OUTER JOIN
        tbl_file f ON a.id = f.article_id
        WHERE
        a.id=#{postId}
    </select>

    <select id="findImagesByPostId" parameterType="java.lang.Long">
        SELECT * FROM tbl_file WHERE article_id = #{postId}
    </select>




</mapper>